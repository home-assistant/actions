name: 'Home Assistant helper: Codenotary'
description: 'GitHub action helper: Codenotary'
inputs:
  user:
    description: Username for Codenotary login
    required: false
    default: ""
  password:
    description: Password for Codenotary login
    required: false
    default: ""
  organisation:
    description: Organisation for Codenotary signing
    required: false
    default: ""
  source:
    description: Source for Codenotary signing
    required: true
  vcn_version:
    description: Codenotary VCN version
    required: false
    default: "v0.9.8"
  version:
    description: Codenotary CAS version
    required: false
    default: "v1.0.0"
  token:
    description: Codenotary CAS API token
    required: false
    default: ""
  signer:
    description: CAS Signer ID/Email
    required: false
    default: "notary@home-assistant.io"

runs:
  using: "composite"
  steps:
    - uses: home-assistant/actions/helpers/vcn@master
      with:
        vcn_version: ${{ inputs.vcn_version }}

    - uses: home-assistant/actions/helpers/cas@master
      with:
        version: ${{ inputs.version }}

    - shell: bash
      name: Codenotary depricated VCN
      run: |
        if [[ -z "${{ inputs.user }}" || -z "${{ inputs.password }}" || -z "${{ inputs.organisation }}" ]]; then
          exit 0
        fi

        if ! vcn authenticate --silent ${{ inputs.source }}; then
          vcn login
          vcn notarize --public ${{ inputs.source }}
        else
          echo "Target is already verified."
        fi
      env:
        VCN_ORG: ${{ inputs.organisation }}
        VCN_OTP_EMPTY: true
        VCN_USER: ${{ inputs.user }}
        VCN_PASSWORD: ${{ inputs.password }}
        VCN_NOTARIZATION_PASSWORD: ${{ inputs.password }}

    - shell: bash
      name: Codenotary Open Source Attestation Service
      run: |
        if [[ -z "${{ inputs.signer }}" || -z "${{ inputs.token }}" ]]; then
          exit 0
        fi

        if ! cas authenticate --silent ${{ inputs.source }}; then
          cas login
          cas notarize --public ${{ inputs.source }}
        else
          echo "Target is already verified."
        fi
      env:
        CAS_SIGNERID: ${{ inputs.signer }}
        CAS_API_KEY: ${{ inputs.token }}
